sudo tcmpdump --help
man tcpdump
cntrl+c stop

sudo tcpdump -i eth0 = stream of new packets
#We'll kick things off by introducing tcpdump and running it without any options. Head's up that tcpdump does require root or administrator privileges in order to 
#capture traffic, so every command must begin with sudo. At a minimum, you must specify an interface to listen on with the -i flag. You may want to check what the primary
#network interface name is using ip link. In this case, we'll be using the interface eth0 for all the examples; 
#this is not necessarily the interface you'd use on your own machine, though.

sudo tcpdump -i eth0 -vn
To enable more detailed analysis, use the -v flag to enable more verbose output. By default, tcpdump will also attempt to perform reverse DNS lookups to resolve 
IP addresses to hostnames, as well as replace port numbers with commonly associated service names. You can disable this behavior using the -n flag. It's recommended 
that you use this flag to avoid generating additional traffic from the DNS lookups, and to speed up the analysis. 
To try this out, enter this command:

Without the verbose flag, tcpdump only gives us:

the layer 3 protocol, source, and destination addresses and ports
TCP details, like flags, sequence and ack numbers, window size, and options

Let's explore tcpdump's filter language a bit next, along with the protocol analysis. Tcpdump supports a powerful language for filtering packets, 
so you can capture only traffic that you care about or want to analyze. The filter rules go at the very end of the command, after all other flags have
been specified. We'll use filtering to only capture DNS traffic to a specific DNS server. Then, we'll generate some DNS traffic, 
so we can demonstrate tcpdump's ability to interpret DNS queries and responses.

sudo tcpdump -i eth0 -vn host 8.8.8.8 and port 53 &

Let's analyze how this filter is constructed, and what exactly it's doing. Host 8.8.8.8 specifies that we only want packets where the source or 
destination IP address matches what we specify (in this case 8.8.8.8). If we only want traffic in one direction, we could also add a direction qualifier, 
like dst or src (for the destination and source IP addresses, respectively). However, leaving out the direction qualifier will match traffic in either direction.

Next, the port 53 portion means we only want to see packets where the source or destination port matches what we specify (in this case, DNS). 
These two filter statements are joined together with the logical operator "and". This means that both halves of the filter statement must be true for a 
packet to be captured by our filter.


To list all running jobs, use the following command:
jobs - l

Now, note down the job ID of the above process, in your local text editor.

Next, execute the following command.

dig @8.8.8.8 A example.com

This uses the dig utility to query a specific DNS server (in this case 8.8.8.8), asking it for the A record for the specified domain (in this case "example.com").

Once that's done, use the job ID (that you've noted down earlier) to bring the process to foreground with the following command:

fg % [job-id]
To stop this process, hit Ctrl+C.

Now, you will see two captured packets, as our filter rules should filter out any other traffic.

The first one is the DNS query, which is our question (from the process running on the terminal) going to the server. Note that,
in this case, the traffic is UDP. Tcpdump's analysis of the DNS query begins right after the UDP checksum field. It starts with the
DNS ID number, followed by some UDP options, then the query type (in this case A? which means we're asking for an A record). Next is the domain name we're interested in (example.com).

The second packet is the response from the server, which includes the same DNS ID from the original query, followed by the original
 query. After this is the answer to the query, which contains the IP address associated with the domain name.


sudo tcpdump -i eth0 port 80 -w http.pcap &
This starts a capture on our eth0 interface that filters for only HTTP traffic by specifying port 80. The -w flag indicates
that we want to write the captured packets to a file named http.pcap.

jobs -l (get job #)
run curl example.com to get html.

fg % [job-id]
bring process to foreground?
cntrl+c to end
A binary file containing the packets we just captured, called http.pcap
read file:
tcpdump -r http.pcap -nv
Note that we don't need to use sudo to read packets from a file. Also note that tcpdump writes full packets to the file, not just the text-based 
analysis that it prints to the screen when it's operating normally. For example,
somewhere in the output you should see the html that was returned as the body of the original query in the terminal.



